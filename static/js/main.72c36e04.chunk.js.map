{"version":3,"sources":["Header&Footer/Header.js","App.js","index.js"],"names":["Header","react_default","a","createElement","style","color","href","React","Component","Square","props","type","className","onClick","value","ReactGA","initialize","displayxCounter","Board","i","_this","this","squares","displaySquare","lsxCounter","localStorage","getItem","retrievedxCounter","parseInt","isNaN","displayoCounter","lsoCounter","retrievedoCounter","displaydrawCounter","lsdrawCounter","retrieveddrawCounter","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","slice","calculateTheWinner","xIsNext","setState","handleCounterReset","length","window","confirm","clear","location","reload","alert","Array","fill","bind","assertThisInitialized","pageview","pathname","nextPlayer","_this3","winner","src_Header_Footer_Header","App_Board","Button","variant","size","id","fullWidth","winnerCombinations","_winnerCombinations$i","slicedToArray","b","c","setItem","xCounter","toString","latestxCounter","oCounter","latestoCounter","setInterval","includes","drawCounter","latestdrawCounter","ReactDom","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.72c36e04.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component{\n\n    render(){\n\n        return(\n            <nav>\n                <ul>\n                    <li style={{color:\"whitesmoke\"}}>\n                        <a href='#'>tic-tac-toe</a>\n                    </li>\n                </ul>\n            </nav>\n        )\n    }\n}\nexport default Header;","import React from 'react';\nimport './App.css';\nimport ReactGA from 'react-ga';\nimport Button from '@mui/material/Button';\nimport Header from './Header&Footer/Header';\n\n// intialize the property tracking ID\nconst tracking_id=\"G-1R65DNZP1P\";\n\nReactGA.initialize(tracking_id);\n\n\n// class TopBanner extends React.Component{\n\n//     render(){\n\n//         return(\n//             <div className=\"top-banner\" style={{color:\"whitesmoke\", fontWeight:\"bold\"}}>\n//                 <marquee width=\"50%\" direction=\"left\">\n//                     {this.props.bannerMessage}\n//                 </marquee>\n//             </div>\n//         )\n//     }\n// }\n\n// render the button\nfunction Square(props){\n\n    return(\n        <button type='button' className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\n// renders nine squares\nclass Board extends React.Component{\n\n    // method to return the squares with a passed value\n    displaySquare(i){\n        return(\n            <Square value={this.props.squares[i]}  onClick={()=>this.props.onClick(i)}/>\n        )\n    }\n\n    render(){\n        \n        return(\n            <div>\n                {/* use div to display a bunch of three blocks and not inline squares */}\n                <div className='board-row'>\n                    {this.displaySquare(0)}\n                    {this.displaySquare(1)}\n                    {this.displaySquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(3)}\n                    {this.displaySquare(4)}\n                    {this.displaySquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(6)}\n                    {this.displaySquare(7)}\n                    {this.displaySquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// player X win counter\nlet lsxCounter=localStorage.getItem(\"localStoragexCounter\");\n\nlet retrievedxCounter=parseInt(lsxCounter, 10);\n\nlet displayxCounter;\n\nif(isNaN(retrievedxCounter)){\n    displayxCounter=0\n}else{\n    displayxCounter=retrievedxCounter;\n}\n\n// player O win counter\nlet lsoCounter=localStorage.getItem(\"localStorageoCounter\");\n\nlet retrievedoCounter=parseInt(lsoCounter, 10);\n\nlet displayoCounter;\n\nif(isNaN(retrievedoCounter)){\n    displayoCounter=0\n}else{\n    displayoCounter=retrievedoCounter;\n}\n\n// draw counter\nlet lsdrawCounter=localStorage.getItem(\"localStorageDrawCounter\");\n\nlet retrieveddrawCounter=parseInt(lsdrawCounter, 10);\n\nlet displaydrawCounter;\n\nif(isNaN(retrieveddrawCounter)){\n    displaydrawCounter=0\n}else{\n    displaydrawCounter=retrieveddrawCounter;\n}\n\n// render a board with placeholder values (0-8)\nclass Game extends React.Component{\n        // on this page/component being added to a tree, \n    componentDidMount(){\n\n        // tracking the page views\n        ReactGA.pageview(window.location.pathname);\n    }\n\n    constructor(props){\n        super(props);\n\n        // declare state of nine null values in an array\n        this.state={\n            // fill each square in the array with a null value\n            squares:Array(9).fill(null),\n            // set player X as the default --or first player\n            xIsNext:true, \n        }\n\n        this.handleCounterReset=this.handleCounterReset.bind(this);\n    }\n\n    handleClick=(i)=>{\n        // create a copy of the array that will be modified --immutabillity\n        const squares=this.state.squares.slice();\n\n        // check if a player has won or the square is clicked\n        if(calculateTheWinner(squares) || squares[i]){\n            return;\n        }\n\n        // check which player is next --turn taking\n        squares[i]=this.state.xIsNext? 'X':'O';\n\n        this.setState({\n            squares:squares,\n            // update the next player\n            xIsNext:!this.state.xIsNext, \n        })\n\n    }\n\n    handleCounterReset=()=>{\n        // check if the counter is at zero\n        if(localStorage.length>0){\n\n            if(window.confirm(\"This action will reset the Counter to 0 !\")===true){\n                localStorage.clear();\n\n                window.location.reload(true)\n            }else{\n                // do nothing\n            }\n        }else{\n            alert(\"The counter is already at 0!\")\n        }\n    }\n    \n    render(){\n\n        const winner=calculateTheWinner(this.state.squares);\n\n        let nextPlayer;\n\n        // if two of the responses are not returning draw   \n        if(winner && winner!=='draw'){\n            \n            nextPlayer='Winner is: ' + winner +' !' \n\n        }else if(winner && winner==='draw'){\n            nextPlayer='It is a ' + winner+' !'\n        }\n        else{\n            nextPlayer='Next player is: ' + (this.state.xIsNext? 'X':'O')\n        }\n\n        return(\n            <div>\n                <Header />\n                <div className='game'>\n                    <div className='game-board'>\n                        <div className='nextPlayer'>\n                            {nextPlayer}\n                        </div>\n                        \n                        < Board squares={this.state.squares} onClick={(i)=>this.handleClick(i)}/>\n                    </div>\n\n                    <div className='game-info'> \n                        <div>\n\n                            <div className='winner-count-header'>\n                                Winner count\n                            </div>\n\n                            <div className='winner-counter'>\n                                <div className=\"display-counter\">X: <span>{displayxCounter}</span></div>\n                                <div className=\"display-counter\">Draw: <span>{displaydrawCounter}</span></div>\n                                <div className=\"display-counter\">O: <span>{displayoCounter}</span> </div>\n                            </div>\n                            \n                            <div className=\"reset-counter-button\">\n                                <Button variant=\"outlined\" size=\"small\" color='error' id=\"reset-button\" fullWidth onClick={this.handleCounterReset}>\n                                    Reset Counter\n                                </Button>\n                            </div>\n                        </div>\n\n                        <div className=\"\"></div>\n\n                    </div>\n\n                </div>\n            </div>\n\n\n        )\n    }\n}\nexport default Game;\n\nfunction calculateTheWinner(squares){\n\n    const winnerCombinations=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ];\n\n    // compare whether any of the combinations has been achieved\n    for(let i=0; i<winnerCombinations.length; i++){\n\n        const [a, b, c] =winnerCombinations[i];\n\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n\n            // set timer before reloading\n            if(squares[a]===\"X\"){\n\n                if(localStorage.getItem(\"localStoragexCounter\")===null){\n\n                    localStorage.setItem(\"localStoragexCounter\", \"0\")\n    \n                }else{\n                    let xCounter=localStorage.getItem(\"localStoragexCounter\");\n    \n                    localStorage.setItem(\"localStoragexCounter\", xCounter.toString())\n                }\n\n                let latestxCounter=parseInt(localStorage.getItem(\"localStoragexCounter\"), 10);\n\n                latestxCounter=latestxCounter+1;\n\n                localStorage.setItem(\"localStoragexCounter\", latestxCounter.toString());\n\n            }else{\n                if(localStorage.getItem(\"localStorageoCounter\")===null){\n\n                    localStorage.setItem(\"localStorageoCounter\", \"0\");\n    \n                }else{\n    \n                    let oCounter=localStorage.getItem(\"localStorageoCounter\");\n    \n                    localStorage.setItem(\"localStorageoCounter\", oCounter.toString());\n                }\n\n                let latestoCounter=parseInt(localStorage.getItem(\"localStorageoCounter\"), 10);\n\n                latestoCounter=latestoCounter+1;\n\n                localStorage.setItem(\"localStorageoCounter\", latestoCounter.toString());\n            }\n\n            setInterval(()=>{\n\n                window.location.reload(true);\n                \n            }, 1000);\n\n            return squares[a]; \n\n        }else if(!squares.includes(null)){\n\n            if(localStorage.getItem(\"localStorageDrawCounter\")===null){\n\n                localStorage.setItem(\"localStorageDrawCounter\", \"0\");\n            }else{\n\n                let drawCounter=localStorage.getItem(\"localStorageDrawCounter\");\n\n                localStorage.setItem(\"localStorageDrawCounter\", drawCounter.toString());\n            }\n\n            let latestdrawCounter=parseInt(localStorage.getItem(\"localStorageDrawCounter\"), 10);\n\n            latestdrawCounter=latestdrawCounter+1;\n\n            localStorage.setItem(\"localStorageDrawCounter\", latestdrawCounter.toString());\n\n            setInterval(()=>{\n\n                window.location.reload(true);\n\n            }, 1000);\n\n            return 'draw';\n        }\n    }\n\n    // game continues since theres no winner or draw yet\n    return null;\n}","import ReactDom from 'react-dom';\nimport React from 'react';\nimport Game from './App';\n\nReactDom.render(\n  <Game />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}