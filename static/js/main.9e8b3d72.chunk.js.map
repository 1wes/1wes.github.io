{"version":3,"sources":["App.js","index.js"],"names":["Square","props","react_default","a","createElement","type","className","onClick","value","ReactGA","initialize","displayxCounter","Board","i","_this","this","squares","displaySquare","React","Component","lsxCounter","localStorage","getItem","retrievedxCounter","parseInt","isNaN","displayoCounter","lsoCounter","retrievedoCounter","displaydrawCounter","lsdrawCounter","retrieveddrawCounter","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","slice","calculateTheWinner","xIsNext","setState","handleCounterReset","length","window","confirm","clear","location","reload","alert","Array","fill","bind","assertThisInitialized","pageview","pathname","nextPlayer","_this3","winner","App_Board","Button","variant","size","color","id","fullWidth","winnerCombinations","_winnerCombinations$i","slicedToArray","b","c","setItem","xCounter","toString","latestxCounter","oCounter","latestoCounter","setInterval","includes","drawCounter","latestdrawCounter","ReactDom","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9e8b3d72.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactGA from 'react-ga';\nimport Button from '@mui/material/Button';\n\n// intialize the property tracking ID\nconst tracking_id=\"G-1R65DNZP1P\";\n\nReactGA.initialize(tracking_id);\n\n\n// class TopBanner extends React.Component{\n\n//     render(){\n\n//         return(\n//             <div className=\"top-banner\" style={{color:\"whitesmoke\", fontWeight:\"bold\"}}>\n//                 <marquee width=\"50%\" direction=\"left\">\n//                     {this.props.bannerMessage}\n//                 </marquee>\n//             </div>\n//         )\n//     }\n// }\n\n// render the button\nfunction Square(props){\n\n    return(\n        <button type='button' className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\n// renders nine squares\nclass Board extends React.Component{\n\n    // method to return the squares with a passed value\n    displaySquare(i){\n        return(\n            <Square value={this.props.squares[i]}  onClick={()=>this.props.onClick(i)}/>\n        )\n    }\n\n    render(){\n        \n        return(\n            <div>\n                {/* use div to display a bunch of three blocks and not inline squares */}\n                <div className='board-row'>\n                    {this.displaySquare(0)}\n                    {this.displaySquare(1)}\n                    {this.displaySquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(3)}\n                    {this.displaySquare(4)}\n                    {this.displaySquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(6)}\n                    {this.displaySquare(7)}\n                    {this.displaySquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// player X win counter\nlet lsxCounter=localStorage.getItem(\"localStoragexCounter\");\n\nlet retrievedxCounter=parseInt(lsxCounter, 10);\n\nlet displayxCounter;\n\nif(isNaN(retrievedxCounter)){\n    displayxCounter=0\n}else{\n    displayxCounter=retrievedxCounter;\n}\n\n// player O win counter\nlet lsoCounter=localStorage.getItem(\"localStorageoCounter\");\n\nlet retrievedoCounter=parseInt(lsoCounter, 10);\n\nlet displayoCounter;\n\nif(isNaN(retrievedoCounter)){\n    displayoCounter=0\n}else{\n    displayoCounter=retrievedoCounter;\n}\n\n// draw counter\nlet lsdrawCounter=localStorage.getItem(\"localStorageDrawCounter\");\n\nlet retrieveddrawCounter=parseInt(lsdrawCounter, 10);\n\nlet displaydrawCounter;\n\nif(isNaN(retrieveddrawCounter)){\n    displaydrawCounter=0\n}else{\n    displaydrawCounter=retrieveddrawCounter;\n}\n\n// render a board with placeholder values (0-8)\nclass Game extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // declare state of nine null values in an array\n        this.state={\n            // fill each square in the array with a null value\n            squares:Array(9).fill(null),\n            // set player X as the default --or first player\n            xIsNext:true, \n        }\n\n        this.handleCounterReset=this.handleCounterReset.bind(this);\n    }\n\n    handleClick=(i)=>{\n        // create a copy of the array that will be modified --immutabillity\n        const squares=this.state.squares.slice();\n\n        // check if a player has won or the square is clicked\n        if(calculateTheWinner(squares) || squares[i]){\n            return;\n        }\n\n        // check which player is next --turn taking\n        squares[i]=this.state.xIsNext? 'X':'O';\n\n        this.setState({\n            squares:squares,\n            // update the next player\n            xIsNext:!this.state.xIsNext, \n        })\n\n    }\n\n    handleCounterReset=()=>{\n        // check if the counter is at zero\n        if(localStorage.length>0){\n\n            if(window.confirm(\"This action will reset the Counter to 0 !\")===true){\n                localStorage.clear();\n\n                window.location.reload(true)\n            }else{\n                // do nothing\n            }\n        }else{\n            alert(\"The counter is already at 0!\")\n        }\n    }\n\n    // on this page/component being added to a tree, \n    componentDidMount(){\n\n        // tracking the page views\n        ReactGA.pageview(window.location.pathname);\n    }\n    \n    render(){\n\n        const winner=calculateTheWinner(this.state.squares);\n\n        let nextPlayer;\n\n        // if two of the responses are not returning draw   \n        if(winner && winner!=='draw'){\n            \n            nextPlayer='Winner is: ' + winner +' !' \n\n        }else if(winner && winner==='draw'){\n            nextPlayer='It is a ' + winner+' !'\n        }\n        else{\n            nextPlayer='Next player is: ' + (this.state.xIsNext? 'X':'O')\n        }\n\n        return(\n            <div>\n                <div className='game'>\n                    <div className='game-board'>\n                        <div className='nextPlayer'>\n                            {nextPlayer}\n                        </div>\n                        \n                        < Board squares={this.state.squares} onClick={(i)=>this.handleClick(i)}/>\n                    </div>\n\n                    <div className='game-info'> \n                        <div>\n\n                            <div className='winner-count-header'>\n                                Winner count\n                            </div>\n\n                            <div className='winner-counter'>\n                                <div className=\"display-counter\">X: <span>{displayxCounter}</span></div>\n                                <div className=\"display-counter\">Draw: <span>{displaydrawCounter}</span></div>\n                                <div className=\"display-counter\">O: <span>{displayoCounter}</span> </div>\n                            </div>\n                            \n                            <div className=\"reset-counter-button\">\n                                <Button variant=\"outlined\" size=\"small\" color='error' id=\"reset-button\" fullWidth onClick={this.handleCounterReset}>\n                                    Reset Counter\n                                </Button>\n                            </div>\n                        </div>\n\n                        <div className=\"\"></div>\n\n                    </div>\n\n                </div>\n            </div>\n\n\n        )\n    }\n}\nexport default Game;\n\nfunction calculateTheWinner(squares){\n\n    const winnerCombinations=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ];\n\n    // compare whether any of the combinations has been achieved\n    for(let i=0; i<winnerCombinations.length; i++){\n\n        const [a, b, c] =winnerCombinations[i];\n\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n\n            // set timer before reloading\n            if(squares[a]===\"X\"){\n\n                if(localStorage.getItem(\"localStoragexCounter\")===null){\n\n                    localStorage.setItem(\"localStoragexCounter\", \"0\")\n    \n                }else{\n                    let xCounter=localStorage.getItem(\"localStoragexCounter\");\n    \n                    localStorage.setItem(\"localStoragexCounter\", xCounter.toString())\n                }\n\n                let latestxCounter=parseInt(localStorage.getItem(\"localStoragexCounter\"), 10);\n\n                latestxCounter=latestxCounter+1;\n\n                localStorage.setItem(\"localStoragexCounter\", latestxCounter.toString());\n\n            }else{\n                if(localStorage.getItem(\"localStorageoCounter\")===null){\n\n                    localStorage.setItem(\"localStorageoCounter\", \"0\");\n    \n                }else{\n    \n                    let oCounter=localStorage.getItem(\"localStorageoCounter\");\n    \n                    localStorage.setItem(\"localStorageoCounter\", oCounter.toString());\n                }\n\n                let latestoCounter=parseInt(localStorage.getItem(\"localStorageoCounter\"), 10);\n\n                latestoCounter=latestoCounter+1;\n\n                localStorage.setItem(\"localStorageoCounter\", latestoCounter.toString());\n            }\n\n            setInterval(()=>{\n\n                window.location.reload(true);\n                \n            }, 1000);\n\n            return squares[a]; \n\n        }else if(!squares.includes(null)){\n\n            if(localStorage.getItem(\"localStorageDrawCounter\")===null){\n\n                localStorage.setItem(\"localStorageDrawCounter\", \"0\");\n            }else{\n\n                let drawCounter=localStorage.getItem(\"localStorageDrawCounter\");\n\n                localStorage.setItem(\"localStorageDrawCounter\", drawCounter.toString());\n            }\n\n            let latestdrawCounter=parseInt(localStorage.getItem(\"localStorageDrawCounter\"), 10);\n\n            latestdrawCounter=latestdrawCounter+1;\n\n            localStorage.setItem(\"localStorageDrawCounter\", latestdrawCounter.toString());\n\n            setInterval(()=>{\n\n                window.location.reload(true);\n\n            }, 1000);\n\n            return 'draw';\n        }\n    }\n\n    // game continues since theres no winner or draw yet\n    return null;\n}","import ReactDom from 'react-dom';\nimport React from 'react';\nimport Game from './App';\n\nReactDom.render(\n  <Game />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}