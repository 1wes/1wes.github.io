{"version":3,"sources":["App.js","index.js"],"names":["Square","props","react_default","a","createElement","type","className","onClick","value","ReactGA","initialize","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","i","squares","state","slice","calculateTheWinner","xIsNext","setState","Array","fill","bind","assertThisInitialized","_this2","nextPlayer","winner","displaySquare","React","Component","Game","pageview","window","location","pathname","App_Board","winnerCombinations","length","_winnerCombinations$i","slicedToArray","b","c","setInterval","reload","includes","ReactDom","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a0390163.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactGA from 'react-ga';\n\n// intialize the property tracking ID\nconst tracking_id=\"G-1R65DNZP1P\";\n\nReactGA.initialize(tracking_id);\n\n\n// class TopBanner extends React.Component{\n\n//     render(){\n\n//         return(\n//             <div className=\"top-banner\" style={{color:\"whitesmoke\", fontWeight:\"bold\"}}>\n//                 <marquee width=\"50%\" direction=\"left\">\n//                     {this.props.bannerMessage}\n//                 </marquee>\n//             </div>\n//         )\n//     }\n// }\n\n// render the button\nfunction Square(props){\n\n    return(\n        <button type='button' className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\n// renders nine squares\nclass Board extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // declare state of nine null values in an array\n        this.state={\n            // fill each square in the array with a null value\n            squares:Array(9).fill(null),\n            // set player X as the default --or first player\n            xIsNext:true, \n        }\n\n        this.handleClick=this.handleClick.bind(this);\n    }\n\n    // method to return the squares with a passed value\n    displaySquare(i){\n        return(\n            <Square value={this.state.squares[i]}  onClick={()=>this.handleClick(i)}/>\n        )\n    }\n\n    handleClick=(i)=>{\n\n        // create a copy of the array that will be modified --immutabillity\n        const squares=this.state.squares.slice();\n\n        // check if a player has won or the square is clicked\n        if(calculateTheWinner(squares) || squares[i]){\n            return;\n        }\n\n        // check which player is next --turn taking\n        squares[i]=this.state.xIsNext? 'X':'O';\n\n        this.setState({\n            squares:squares,\n            // update the next player\n            xIsNext:!this.state.xIsNext\n        })\n\n    }\n\n    render(){\n\n        const winner=calculateTheWinner(this.state.squares);\n\n        let nextPlayer;\n\n        // if two of the responses are not returning draw   \n        if(winner && winner!=='draw'){\n\n            nextPlayer='Winner is: ' + winner;\n\n        }else if(winner && winner==='draw'){\n            nextPlayer='It was a ' + winner;\n        }\n        else{\n            nextPlayer='Next player is: ' + (this.state.xIsNext? 'X':'O')\n        }\n        \n        return(\n            <div>\n                <div className='nextPlayer'>\n                    {nextPlayer}\n                </div>\n\n                {/* use div to display a bunch of three blocks and not inline squares */}\n                <div className='board-row'>\n                    {this.displaySquare(0)}\n                    {this.displaySquare(1)}\n                    {this.displaySquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(3)}\n                    {this.displaySquare(4)}\n                    {this.displaySquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(6)}\n                    {this.displaySquare(7)}\n                    {this.displaySquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// render a board with placeholder values (0-8)\nclass Game extends React.Component{\n\n    // on this page/component being added to a tree, \n    componentDidMount(){\n\n        // tracking the page views\n        ReactGA.pageview(window.location.pathname);\n    }\n    \n    render(){\n\n        // let message=\"Tie/Draw functionality will be added soon\";\n\n        return(\n            <div>\n                {/* <TopBanner bannerMessage={message}/> */}\n\n                <div className='game'>\n                    <div className='game-board'>\n                        < Board />\n                    </div>\n\n                    <div className='game-info'> \n                        <div>\n                            {/* status */}\n                        </div>\n\n                        <div>\n                            {/* To Do */}\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n\n        )\n    }\n}\nexport default Game;\n\nfunction calculateTheWinner(squares){\n\n    const winnerCombinations=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ];\n\n    // compare whether any of the combinations has been achieved\n    for(let i=0; i<winnerCombinations.length; i++){\n\n        const [a, b, c] =winnerCombinations[i];\n\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n\n            // set timer before reloading\n            setInterval(()=>{\n\n                window.location.reload(true);\n                \n            }, 1000);\n\n            return squares[a]; \n\n        }else if(!squares.includes(null)){\n\n            setInterval(()=>{\n                window.location.reload(true);\n            }, 1000);\n\n            return 'draw';\n        }\n    }\n\n    // game continues since theres no winner or draw yet\n    return null;\n}\n","import ReactDom from 'react-dom';\nimport React from 'react';\nimport Game from './App';\n\nReactDom.render(\n  <Game />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}