{"version":3,"sources":["App.js","index.js"],"names":["Square","props","react_default","a","createElement","type","className","onClick","value","ReactGA","initialize","Board","i","_this","this","squares","displaySquare","React","Component","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","state","slice","calculateTheWinner","xIsNext","setState","xCounter","counter","oCounter","Array","fill","pageview","window","location","pathname","nextPlayer","_this3","winner","App_Board","winnerCombinations","length","_winnerCombinations$i","slicedToArray","b","c","setInterval","reload","includes","ReactDom","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.caa9467f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactGA from 'react-ga';\n\n// intialize the property tracking ID\nconst tracking_id=\"G-1R65DNZP1P\";\n\nReactGA.initialize(tracking_id);\n\n\n// class TopBanner extends React.Component{\n\n//     render(){\n\n//         return(\n//             <div className=\"top-banner\" style={{color:\"whitesmoke\", fontWeight:\"bold\"}}>\n//                 <marquee width=\"50%\" direction=\"left\">\n//                     {this.props.bannerMessage}\n//                 </marquee>\n//             </div>\n//         )\n//     }\n// }\n\n// render the button\nfunction Square(props){\n\n    return(\n        <button type='button' className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\n// renders nine squares\nclass Board extends React.Component{\n\n    // method to return the squares with a passed value\n    displaySquare(i){\n        return(\n            <Square value={this.props.squares[i]}  onClick={()=>this.props.onClick(i)}/>\n        )\n    }\n\n    render(){\n        \n        return(\n            <div>\n                {/* use div to display a bunch of three blocks and not inline squares */}\n                <div className='board-row'>\n                    {this.displaySquare(0)}\n                    {this.displaySquare(1)}\n                    {this.displaySquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(3)}\n                    {this.displaySquare(4)}\n                    {this.displaySquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(6)}\n                    {this.displaySquare(7)}\n                    {this.displaySquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// render a board with placeholder values (0-8)\nclass Game extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // declare state of nine null values in an array\n        this.state={\n            // fill each square in the array with a null value\n            squares:Array(9).fill(null),\n            // set player X as the default --or first player\n            xIsNext:true, \n        }\n    }\n\n    handleClick=(i)=>{\n\n        // create a copy of the array that will be modified --immutabillity\n        const squares=this.state.squares.slice();\n\n        // check if a player has won or the square is clicked\n        if(calculateTheWinner(squares) || squares[i]){\n            return;\n        }\n\n        // check which player is next --turn taking\n        squares[i]=this.state.xIsNext? 'X':'O';\n\n        this.setState({\n            squares:squares,\n            // update the next player\n            xIsNext:!this.state.xIsNext, \n            xCounter:0, \n            counter:0,\n            oCounter:0\n        })\n\n    }\n\n \n\n    // on this page/component being added to a tree, \n    componentDidMount(){\n\n        // tracking the page views\n        ReactGA.pageview(window.location.pathname);\n    }\n    \n    render(){\n\n        const winner=calculateTheWinner(this.state.squares);\n\n        let nextPlayer;\n\n        // if two of the responses are not returning draw   \n        if(winner && winner!=='draw'){\n            \n            nextPlayer='Winner is: ' + winner +' !'\n\n        }else if(winner && winner==='draw'){\n            nextPlayer='It is a ' + winner+' !'\n        }\n        else{\n            nextPlayer='Next player is: ' + (this.state.xIsNext? 'X':'O')\n        }\n\n        // let message=\"Tie/Draw functionality will be added soon\";\n\n        return(\n            <div>\n                {/* <TopBanner bannerMessage={message}/> */}\n\n                <div className='game'>\n\n\n\n                    <div className='game-board'>\n                        <div className='nextPlayer'>\n                            {nextPlayer}\n                        </div>\n                        \n                        < Board squares={this.state.squares} onClick={(i)=>this.handleClick(i)}/>\n                    </div>\n\n                    <div className='game-info'> \n                        <div>\n\n\n                            <div className='winner-count-header'>\n                                Winner count\n                            </div>\n\n                            <div className='winner-counter'>\n                                <div>X: {this.state.xCounter} </div>\n                                <div>Draw: {this.state.counter} </div>\n                                <div>O: {this.state.oCounter} </div>\n                            </div>\n                        </div>\n\n                        <div className=\"\"></div>\n\n                    </div>\n\n                </div>\n            </div>\n\n\n        )\n    }\n}\nexport default Game;\n\nfunction calculateTheWinner(squares){\n\n    const winnerCombinations=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ];\n\n    // compare whether any of the combinations has been achieved\n    for(let i=0; i<winnerCombinations.length; i++){\n\n        const [a, b, c] =winnerCombinations[i];\n\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n\n            // set timer before reloading\n            setInterval(()=>{\n\n                window.location.reload(true);\n                \n            }, 1000);\n\n            return squares[a]; \n\n        }else if(!squares.includes(null)){\n\n            setInterval(()=>{\n\n                window.location.reload(true);\n\n            }, 1000);\n\n            return 'draw';\n        }\n    }\n\n    // game continues since theres no winner or draw yet\n    return null;\n}\n","import ReactDom from 'react-dom';\nimport React from 'react';\nimport Game from './App';\n\nReactDom.render(\n  <Game />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}