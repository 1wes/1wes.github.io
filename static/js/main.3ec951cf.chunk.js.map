{"version":3,"sources":["App.js","index.js"],"names":["ReactGA","initialize","TopBanner","react_default","a","createElement","className","style","color","fontWeight","width","direction","this","props","bannerMessage","React","Component","Square","type","onClick","value","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","i","squares","state","slice","calculateTheWinner","xIsNext","setState","Array","fill","bind","assertThisInitialized","_this2","nextPlayer","winner","displaySquare","Game","pageview","window","location","pathname","App_TopBanner","App_Board","winnerCombinations","length","_winnerCombinations$i","slicedToArray","b","c","setInterval","reload","ReactDom","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3ec951cf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactGA from 'react-ga';\n\n// intialize the property tracking ID\nconst tracking_id=\"G-1R65DNZP1P\";\n\nReactGA.initialize(tracking_id);\n\n\nclass TopBanner extends React.Component{\n\n    render(){\n\n        return(\n            <div className=\"top-banner\" style={{color:\"whitesmoke\", fontWeight:\"bold\"}}>\n                <marquee width=\"50%\" direction=\"left\">\n                    {this.props.bannerMessage}\n                </marquee>\n            </div>\n        )\n    }\n}\n\n// render the button\nfunction Square(props){\n\n    return(\n        <button type='button' className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\n// renders nine squares\nclass Board extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        // declare state of nine null values in an array\n        this.state={\n            // fill each square in the array with a null value\n            squares:Array(9).fill(null),\n            // set player X as the default --or first player\n            xIsNext:true\n        }\n\n        this.handleClick=this.handleClick.bind(this);\n    }\n\n    // method to return the squares with a passed value\n    displaySquare(i){\n        return(\n            <Square value={this.state.squares[i]}  onClick={()=>this.handleClick(i)}/>\n        )\n    }\n\n    handleClick=(i)=>{\n\n        // create a copy of the array that will be modified --immutabillity\n        const squares=this.state.squares.slice();\n\n        // check if a player has won or the square is clicked\n        if(calculateTheWinner(squares) || squares[i]){\n            return;\n        }\n\n        // check which player is next --turn taking\n        squares[i]=this.state.xIsNext? 'X':'O';\n\n        this.setState({\n            squares:squares,\n            // update the next player\n            xIsNext:!this.state.xIsNext\n        })\n\n    }\n\n    render(){\n\n        const winner=calculateTheWinner(this.state.squares);\n\n        let nextPlayer;\n\n        if(winner){\n            nextPlayer='Winner is: ' + winner;\n        }else{\n            nextPlayer='Next player is: ' + (this.state.xIsNext? 'X':'O')\n        }\n        \n        return(\n            <div>\n                <div className='nextPlayer'>\n                    {nextPlayer}\n                </div>\n\n                {/* use div to display a bunch of three blocks and not inline squares */}\n                <div className='board-row'>\n                    {this.displaySquare(0)}\n                    {this.displaySquare(1)}\n                    {this.displaySquare(2)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(3)}\n                    {this.displaySquare(4)}\n                    {this.displaySquare(5)}\n                </div>\n\n                <div className='board-row'>\n                    {this.displaySquare(6)}\n                    {this.displaySquare(7)}\n                    {this.displaySquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// render a board with placeholder values (0-8)\nclass Game extends React.Component{\n\n    // on this page/component being added to a tree, \n    componentDidMount(){\n\n        // tracking the page views\n        ReactGA.pageview(window.location.pathname);\n    }\n    \n    render(){\n\n        let message=\"Tie/Draw functionality will be added soon\"\n\n        return(\n            <div>\n                <TopBanner bannerMessage={message}/>\n\n                <div className='game'>\n                    <div className='game-board'>\n                        < Board />\n                    </div>\n\n                    <div className='game-info'> \n                        <div>\n                            {/* status */}\n                        </div>\n\n                        <div>\n                            {/* To Do */}\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n\n        )\n    }\n}\nexport default Game;\n\nfunction calculateTheWinner(squares){\n\n    const winnerCombinations=[\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ];\n\n\n    // compare whether any of the combinations has been achieved\n    for(let i=0; i<winnerCombinations.length; i++){\n\n        const [a, b, c] =winnerCombinations[i];\n\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n\n            // window.location.reload(true);\n            // set timer before reloading\n            setInterval(()=>{\n\n                window.location.reload(true);\n                \n            }, 1000);\n\n            return squares[a]; \n\n        }\n    }\n\n    // incase of a tie, \n    return null;\n}\n","import ReactDom from 'react-dom';\nimport React from 'react';\nimport Game from './App';\n\nReactDom.render(\n  <Game />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}